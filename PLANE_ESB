Курс обучения новичков 

Предлагается следующий учебный план, с целью быстрого и стандартизованного обучения новичков необходимым техническим компетенциям.  
Учебный план покрывает основные технологии, утвержденные АШ и применяемые в разработке ESB.  
Предполагается, что новичок имеет знания по Java SE, владеет технологией JDBC и обладает базовыми навыками в SQL.

0. Стили интеграции корпоративных приложений.
Изучение достоинств и недостатков следующих подходов:
Передача файлов. 
Общая база данных. 
Удаленный вызов процедур. 
Обмен сообщениями. Введение в JMS.
Планируемое время: 2 часа.

1. Java Message Service. ActiveMQ.
Общие понятия (брокер, очередь, топик, сообщение). 2 ч.
Режимы получения сообщений:  
Session.SESSION_TRANSACTED,  
Session.AUTO_ACKNOWLEDGE,  
Session.DUPS_OK_ACK,  
Session.CLIENT_ACKNOWLEDGE.  
Персистентные и неперсистентные сообщения. 2-3 ч.  
Embedded Broker. Запуск, настройка. VM-connector. 2 ч.  
Плагины для брокера. Подключение плагина к Embedded брокеру. Обзор плагина авторизации. 1 ч.  

 Задача 1 
Написать тест, который будет отправлять сообщения в брокер и принимать в разных режимах как сессий (AUTO_ACK, TRANSACTED, etc.),  
так и сообщений (персистентные и неперсистентные).  
Оформить итоговый файл с результатами записи и чтения в каждом режиме.  
Объяснить полученные результаты.  
Предполагаемое время решения 6-10 часов.
 
 Задача 2 
В задаче 1 использовать embedded брокер и VM-коннектор, после чего снова проверить все режимы.  
Сравнить скорость работы по сравнению с использованием tcp коннектора. Объяснить полученные результаты.  
Предполагаемое время решения 4-6 часов.  

     ####  Решение и результаты здесь - https://github.com/k0r0tk0ff/Jmstest_embedded_broker

2. Spring Framework Core (IoC & DI)
Общие понятия IoC, DI. 3 ч.
Обзор общей функциональности фреймворка. Понятие контекста приложения. 2 ч.
Создание объектов на основе XML описания.  
Методы инициализации и уничтожения объектов.  
Вызов конструкторов из XML описания, получение объектов из фабрики.  
Передача параметров из конфигурационных файлов. 5 ч.  
Инъекция объектов. Описание зависимости между создаваемыми объектами (depends-on). 2 ч.  
Подключение плагина к standalone брокеру ActiveMQ. 1 ч.  

 Задача 
Реализовать приложение, которое разворачивает Embedded брокер, а так запускает 2 потока:  отправитель и получатель.  
Отправитель с некоторой периодичностью генерирует сообщения и отправляет брокер.  
Получатель слушает очередь, и при появлении там сообщения производит запись сообщения в БД через JDBC.  
Запись производится в 2 таблицы, в одной тело сообщения, в другой - заголовки.  
Связь между таблицами реализовать с помощью внешнего ключа.  
Явно запускать потоки не следует. Настройку, запуск, конфигурирование осуществлять при помощи средств Spring Framework.  
Предполагаемое время решения 8-14 часов.  

      #### Решение здесь - https://github.com/k0r0tk0ff/spring_jms_project

3. Apache Camel
EIP.  
Обзор функциональности и архитектуры.  
Exchange, Message  
Описание маршрутов в Java DSL и Spring DSL.  
Стандартные компоненты Apache Camel (file, jms, http). Конвертеры типов.  
Добавление бизнес логики в маршруты (beans, processors).  
Обработка исключений.  
Конфигурирование менеджера распределенных транзакций для использования в маршрутах.  
 Задача 
Есть папка с файлами.  
При помощи средств Apache Camel реализовать следующий процесс: файл достается из папки, далее,  
в зависимости от типа, выполняются некоторые действия.  
Если файл имеет расширение xml, то его необходимо его содержимое отправить в очередь в брокере ActiveMQ.  
Если он имеет расширение txt, то его необходимо отправить в брокер, а так же записать в таблицу в БД.  
Если расширение другое - выбрасывается исключение и отправлять файл в очередь invalid-queue в ActiveMQ.  
При обработке каждого сотого файла отсылать письмо, содержащее количество файлов txt, количество файлов xml,  
количество нераспознанных файлов, а так же время обработки пачки сообщений.  
Для гарантированной доставки следует сконфигурировать и подключить менеджер распределенных транзакций (Bitronix TM).  
Предполагаемое время решения - 10-15 ч.  

     ####  Решение здесь -  https://github.com/k0r0tk0ff/apache_camel_project  

4. JMX.
Обзор технологии.
JConsole как средство мониторинга Java приложения.
JConsole как средство управления через JMX.
Разработка и регистрация MBean.

    #### Пример использования здесь - https://github.com/k0r0tk0ff/simple_jmx_realization

5. Средство управления жизненным циклом проекта Apache Maven
Общие понятия (артефакт, координаты артефакта, репозиторий)
Обзор общей функциональности
Структура проекта, управление зависимостями (pom-файл, dependencies)
Стандартные жизненные циклы проекта (clean, default, site)
Плагины
Презентация по Maven.odp

6. Средства и технологии работы с XML
Построение Xml в Java средствами JDK.
Разбор XML средствами Java. SAX и StAX парсеры.
XSD
XSLT

 Задача 1 
На основании запроса
SELECT ID_ART,NAME,CODE,USERNAME,GUID FROM WHS.ARTICLE where rownum < 10000
Сформировать XML вида :
<articles>
    <articles id_art="104880" name="Батон нарезной в/с 0.4кг" code="1010050114" username="WHS" guid="6992B998083711DC87F900093D12899D">
    ...
</articles>

Предполагаемое время решения: 3 ч.

 Задача 2 
Написать XSLT преобразование, которое приведет xml, полученный в предыдущей задаче к виду:
<articles>
    <article>
        <id_art>104880</id_art>
        <name>Батон нарезной в/с 0.4кг</name>
        <code>1010050114</code>
        <username>WHS</username>
        <guid>6992B998083711DC87F900093D12899D</guid>
    </article>
    ...
</articles>
Применять преобразование можно в Eclipse, предварительно сконфигурировав XSLT процессор SAXON.
Предполагаемое время решения 3-5 ч.

 Задача 3  
Написать программу, которая из xml, полученного из предыдущей задачи после преобразования, сформирует CSV файл вида
ID_ART,NAME,CODE,USERNAME,GUID
104880,Батон нарезной в/с 0.4кг,1010050114,WHS,6992B998083711DC87F900093D12899D
...
Предполагаемое время решения - 4-6 ч.

   #### Решение здесь - https://github.com/k0r0tk0ff/generate_xml_and_convert_to_csv

7. Средства журналирования приложений  
Java Util Logging(JUL), Simple Logger for Java (SLF4J), LOG4J 
http://www.skipy.ru/useful/logging.html

   #### Повсеместно, в решениях задач используется реализация логирования log4j2 через обертку slf4j
